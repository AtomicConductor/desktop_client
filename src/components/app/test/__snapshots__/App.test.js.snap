// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshots match snapshot when status is success 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Layout>
        <Switch>
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Downloader)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/downloader"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Plugins)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/plugins"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Account)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/account"
          />
          <Redirect
            push={true}
            to="/downloader"
          />
        </Switch>
      </Layout>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Switch>
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Downloader)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/downloader"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Plugins)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/plugins"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Account)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/account"
          />
          <Redirect
            push={true}
            to="/downloader"
          />
        </Switch>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Downloader)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/downloader"
            />,
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Plugins)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/plugins"
            />,
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Account)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/account"
            />,
            <Redirect
              push={true}
              to="/downloader"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Downloader)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
              "path": "/downloader",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Plugins)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
              "path": "/plugins",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(Account)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
              "path": "/account",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "push": true,
              "to": "/downloader",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Layout>
          <Switch>
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Downloader)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/downloader"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Plugins)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/plugins"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Account)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/account"
            />
            <Redirect
              push={true}
              to="/downloader"
            />
          </Switch>
        </Layout>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Switch>
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Downloader)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/downloader"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Plugins)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/plugins"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Account)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/account"
            />
            <Redirect
              push={true}
              to="/downloader"
            />
          </Switch>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(Downloader)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/downloader"
              />,
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(Plugins)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/plugins"
              />,
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(Account)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/account"
              />,
              <Redirect
                push={true}
                to="/downloader"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Downloader)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "path": "/downloader",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Plugins)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "path": "/plugins",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Account)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "path": "/account",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "push": true,
                "to": "/downloader",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
